# import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os

#print(os.chdir("D:\Lectures\Lectures\Data Science\datasetDS"))

# reading data
automobile = pd.read_csv('Automobile_data.csv')
print(automobile.head())

# # # getting datatypes
print(automobile.dtypes)

#getting statistics
print(automobile.describe())

#cleaning data
print(automobile.isnull().sum())

# # #cleaning the normalized data
# # # Find out number of records having '?' value for normalized losses
print(automobile['normalized-losses'].loc[automobile['normalized-losses'] == '?'].count())
# # #setting missing to mean
# # # Setting the missing value to mean of normalized losses and conver the datatype to integer
nl = automobile['normalized-losses'].loc[automobile['normalized-losses'] != '?']
nlmean = nl.astype(str).astype(int).mean()
automobile['normalized-losses'] = automobile['normalized-losses'].replace('?',nlmean).astype(int)
print(automobile['normalized-losses'].head())

# #cleaning price data
# # Find out the number of values which are not numeric
print(automobile['price'].str.isnumeric().value_counts())


# #List out the values which are not numeric
print(automobile['price'].loc[automobile['price'].str.isnumeric() == False])

# #Setting the missing value to mean of price and convert the datatype to integer
price = automobile['price'].loc[automobile['price'] != '?']
pmean = price.astype(str).astype(int).mean()
automobile['price'] = automobile['price'].replace('?',pmean).astype(int)
print(automobile['price'].head())


# #Checking the numberic and replacing with mean value and conver the datatype to integer
automobile['horsepower'].str.isnumeric().value_counts()
horsepower = automobile['horsepower'].loc[automobile['horsepower'] != '?']
hpmean = horsepower.astype(str).astype(int).mean()
automobile['horsepower'] = automobile['horsepower'].replace('?',pmean).astype(int)

# #Checking the outlier of horsepower

print(automobile.loc[automobile['horsepower'] > 10000])


# #Excluding the outlier data for horsepower
print(automobile[np.abs(automobile.horsepower - automobile.horsepower.mean()) <= (3*automobile.horsepower.std())])


# #Find out the number of invalid value
print(automobile['bore'].loc[automobile['bore'] == '?'])


# #Replace the non-numeric value to null and conver the datatype
automobile['bore'] = pd.to_numeric(automobile['bore'],errors='coerce')
print(automobile.dtypes)


# #Replace the non-number value to null and convert the datatype
automobile['stroke'] = pd.to_numeric(automobile['stroke'],errors='coerce')
print(automobile.dtypes)


# #Convert the non-numeric data to null and convert the datatype
automobile['peak-rpm'] = pd.to_numeric(automobile['peak-rpm'],errors='coerce')
print(automobile.dtypes)

# #remove the records which are having the value '?'
automobile['num-of-doors'].loc[automobile['num-of-doors'] == '?']
automobile = automobile[automobile['num-of-doors'] != '?']
automobile['num-of-doors'].loc[automobile['num-of-doors'] == '?']

#remove the records which are having the value '?'
print("=====================================")
#Line Chart
'''
automobile.make.value_counts().nlargest(10).plot(kind='bar',figsize=(15,5))
plt.title('Number of vehicles by make')
plt.ylabel('Number of vehicles')
plt.xlabel('Make');
plt.savefig('CompaniesToNoOfVehicles')
'''

#bar chart
'''
automobile.symboling.hist(bins=6,color='green');
plt.title("Insurance risk ratings of vehicles")
plt.ylabel('Number of vehicles')
plt.xlabel('Risk rating');
plt.savefig('VehiclesToRiskRating.png');
'''
#histogram chart
'''
automobile['normalized-losses'].hist(bins=5,color='orange');
plt.title("Normalized losses of vehicles")
plt.ylabel('Number of vehicles')
plt.xlabel('Normalized losses');
plt.savefig('NoOfVehiclesToNormLossed.png');
'''

#bar chart
'''
automobile['fuel-type'].value_counts().plot(kind='bar',color='purple')
plt.title("Fuel type frequence diagram")
plt.ylabel('Number of vehicles')
plt.xlabel('Fuel type');
plt.savefig('NoOfVehiclesToFuelType.png')
#for pie chart(circle)
'''

#pie chart
'''
automobile['aspiration'].value_counts().plot.pie(figsize=(6, 6),autopct='%.2f')
plt.title("Fuel type pie diagram")
plt.ylabel('Number of vehicles')
plt.xlabel('Fuel type');
plt.savefig('NoOfVehiclesToFuelTypePi.png')
'''

#histogram chart
'''
automobile.horsepower[np.abs(automobile.horsepower-automobile.horsepower.mean())<=(3*automobile.horsepower.std())].hist(bins=5,color='red');
plt.title("Horse power histogram")
plt.ylabel('Number of vehicles')
plt.xlabel('Horse power');
plt.savefig('HorsePowerHistogram.png');
'''

#line chart
'''
automobile['num-of-doors'].value_counts().plot(kind='bar',color='purple')
plt.title("Number of doors frequency diagram")
plt.ylabel('Number of vehicles')
plt.xlabel('Number of doors');
'''


'''
Here we are having total 13000 applications for scholarship and out of them 7000 students are matching our 1st criteria and next criteria is matched by 5000 students, Whereas both criteria matched by only 2000 students. So 2000 students are eligible for Scholarship.
'''



'''
Linear Regression

#%%
import matplotlib.pyplot as plt
from scipy import stats

x = [5,7,8,7,2,17,2,9,4,11,12,9,6]
y = [99,86,87,88,111,86,103,87,94,78,77,85,86]

slope, intercept, r, p, std_err = stats.linregress(x, y)

def myfunc(x):
  return slope * x + intercept

mymodel = list(map(myfunc, x))

plt.scatter(x, y)
plt.plot(x, mymodel)
plt.show()
 # predict the speed of a 10 years old car:
speed = myfunc(10)
print(speed)
# %%

Multiple Linear Regression

import pandas
from sklearn import linear_model

df = pandas.read_csv("data.csv")

X = df[['Weight', 'Volume']]
y = df['CO2']

regr = linear_model.LinearRegression()
regr.fit(X, y)

#predict the CO2 emission of a car where the weight is 2300kg, and the volume is 1300cm3:
predictedCO2 = regr.predict([[2300, 1300]])

print(predictedCO2)
'''
